<capitulo>Solr 4.x</capitulo>

    O <link>http://lucene.apache.org/solr/</link><text>Apache Solr</text> é
uma plataforma pesquisa com indexação distribuida, replicação, balanceamento
de consultas e <i>failover</i> automático, desenvolvido em Java e integrável
a qualquer outra linguagem.

    É baseado no motor de pesquisa
<link>https://lucene.apache.org/core/</link><text>Apache Lucene</text> e
implementa uma API semelhante a REST sob HTTP. Utiliza o container web
<link>http://www.eclipse.org/jetty/</link><text>Eclipse Jetty</text> para
fornecer acesso a uma aplicação de console, bem como à API de pesquisa.

    A indexação dos dados ocorre durante sua submissão, com resultados
disponíveis para consulta próximo do tempo real. Já a consulta, também
realizada via HTTP GET, apresenta resultados em XML ou JSON, além de outros
formatos disponíveis.

    Assim, o Solr mantém uma cópia dos dados da base de origem, devendo esta
carga ser realizada por meio da alguma linguagem de programação. Após
instalado e iniciado, o console do Solr estará disponível por meio da porta
8983 com o contexto /solr: <url>http://127.0.0.1:8983/solr</url>.

<subsecao>Instalação</subsecao>

<step>Verificar se há JVM instalada</step>

<comando>
# java -version
openjdk version "1.8.0_171"
OpenJDK Runtime Environment (build 1.8.0_171-b10)
OpenJDK 64-Bit Server VM (build 25.171-b10, mixed mode)
</comando>

<step>Criação do usuário do sistema</step>

<comando>
adduser --comment "User for Solr" --home /srv/apache-solr-4.0.0 --no-create-home
        --system --shell /bin/false solr
</comando>

    É um controle de segurança válido a criação de um usuário para cada
processo do Solr que for iniciado. O isolamento dos dados armazenados é um
critério para a inicialização de diferentes processos do Solr.

    Cada processo do Solr utiliza um usuário independente, bem como uma
porta TCP para acesso ao seu console e a API de consulta, além de um
diretório de trabalho para armazenar os repositórios de dados.

<step>Download</step>

    O instalador do Apache Solr pode ser obtido no seguinte endereço:

<lista>
  <item/><url>https://archive.apache.org/dist/lucene/solr/4.0.0/apache-solr-4.0.0.zip</url>
  <item/><url>https://archive.apache.org/dist/lucene/solr/4.0.0/apache-solr-4.0.0.zip.md5</url>
</lista>

    Outras versões do Apache Solr estão disponíveis em:

<lista>
  <item/><url>https://archive.apache.org/dist/lucene/solr/</url>
</lista>

    Verifique o arquivo obtido e descompacte-o:

<comando>
# cd /srv

# md5sum -c apache-solr-4.0.0.zip.md5
apache-solr-4.0.0.zip: SUCESSO

# unzip apache-solr-4.0.0.zip
</comando>

<subsecao>Diretório de trabalho do Solr</subsecao>

    O Solr em execução gerencia um conjunto de repositórios de dados. Os
dados de diferentes repositórios, ainda que gerenciados pela mesma instância
do serviço, possuem algum sentido entre si.

<step>Criar o diretório de trabalho do Solr</step>

<comando>
# cp -a apache-solr-4.0.0/example apache-solr-4.0.0/server1
</comando>

<step>Conceder permissão para ativação da aplicação de console do Solr</step>

<comando>
# chown solr: apache-solr-4.0.0/server1/solr-webapp/
</comando>

    Após todas as configurações serem realizadas, o serviço poderá ser
iniciado.

    <b>Não inicie-o neste momento</b>.

<comando>
# su -l solr -s /bin/bash
$ cd /src/apache-solr-4.0.0/server1
$ java -jar start.jar
</comando>

<step>Defina a porta e a interface do serviço</step>

    Caso um segundo processo do Solr necessite ser iniciado, para que um
novo conjunto de dados seja indexado no mesmo servidor, é necessário alterar
a porta TCP padrão (8983), uma vez que não é possível iniciar dois processos
em modo de escuta (LISTEN) na mesma porta.

    Isso pode ser realizado durante a inicialização do Solr por meio da
opção <b>-Djetty.port=8984</b>, bem como pode-se optar um determinada interface
de rede ou todas interfaces por meio da opção <b>-Djetty.host=0.0.0.0</b>. O
exemplo a seguir inicia o Solr apenas para acesso local:

    <b>Não inicie-o neste momento</b>.

<comando>
# su -l solr -s /bin/bash
$ cd /src/apache-solr-4.0.0/server2
$ java -jar start.jar -Djetty.host=127.0.0.1 -Djetty.port=8984
</comando>

<subsecao>Repositórios de dados</subsecao>

    Os repositórios de dados do Solr são denominados <i>cores</i>. Uma
instância do servidor Solr pode ser configurada com vários repositórios de
dados.

<step>Criar diretório para um conjunto de repositórios de dados</step>

    O diretório <b>solr/instance1</b> representa um conjunto de repositórios
de dados que será gerenciado pelo Solr.

<comando>
# cd /srv/apache-solr-4.0.0/server1
# cp -a solr/collection1 solr/instance1
# chown solr: solr/instance1
</comando>

<step>Configurar repositórios de dados</step>

    Os repositórios são configurados no arquivo
<b>./server1/solr/solr.xml</b> conforme exemplo abaixo:

<comando>
<core name="acordaos"  instanceDir="instance1" dataDir="data-acordaos" />
<core name="sentencas" instanceDir="instance1" dataDir="data-sentencas" />
<core name="decisoes"  instanceDir="instance1" dataDir="data-decisoes" />
</comando>

    Após iniciar o Solr, os seguintes diretórios serão criados:

<comando>
/srv/apache-solr-4.0.0/server1/solr/instance1/data-acordaos
/srv/apache-solr-4.0.0/server1/solr/instance1/data-sentencas
/srv/apache-solr-4.0.0/server1/solr/instance1/data-decisoes
</comando>

    As seguintes URLs estarão disponíveis para consulta:

<comando>
http://127.0.0.1:8983/solr/acordaos/select?q=*%3A*
http://127.0.0.1:8983/solr/sentencas/select?q=*%3A*
http://127.0.0.1:8983/solr/decisoes/select?q=*%3A*
</comando>


<subsecao>Schema</subsecao>

    O schema detém a configuração dos tipos dos campos de dados que estarão
disponíveis aos repositórios. Os campos são configurados no arquivo
<b>./server1/solr/instance1/conf/schema.xml</b> conforme exemplo abaixo:

<comando>
<field name="ano" type="long" indexed="true" stored="true" />
<field name="txt_relator" type="stringFacet" indexed="true" stored="true" />
<field name="dta_julgamento" type="date" indexed="true" stored="true" />
<field name="txt_inteiro_teor" type="text" indexed="true" stored="true" />
</comando>

<subsecao>Configurações adicionais</subsecao>

<subsubsecao>Configurações do campo padrão de pesquisa</subsubsecao>

    O uso da configuração <b>defaultSearchField</b> não é recomendado
conforme a documentação do Solr, devendo-se indicar o campo na consulta HTTP
GET, pelo parâmetro <b>q=campo:valor</b>.

    Caso a aplicação não informe o campo para a consulta e utilize apenas 
<b>q=valor</b>, pode-se configurar o campo padrão em
<b>./server1/solr/instance1/conf/solrconfig.xml</b> ou omitir esta definição
para habilitar o parâmetro <b>defaultSearchField</b> do arquivo
<b>./server1/solr/instance1/ conf/schema.xml</b>.

<lista>
  <item/><b>./server1/solr/instance1/conf/solrconfig.xml</b>
</lista>

<comando>
  ...
  <requestHandler name="/select" class="solr.SearchHandler">
    <!-- default values for query parameters can be specified, these
         will be overridden by parameters in the request
      -->
     <lst name="defaults">
    <!-- Comment to use defaultSearchField from schema.xml
       <str name="echoParams">explicit</str>
       <int name="rows">10</int>
       <str name="df">text</str>
      -->
     </lst>
  ...
</comando>

<lista>
  <item/><b>./server1/solr/instance1/conf/schema.xml</b>
</lista>

<comando>
 ...
 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>field_all</defaultSearchField>
 ...
</comando>

<subsubsecao>Configurações da indexação conjunta dos campos</subsubsecao>

<comando>
<!-- copyField commands copy one field to another at the time a document
     is added to the index.  It's used either to index the same field differently,
    or to add multiple fields to the same field for easier/faster searching. -->
<copyField source="*" dest="field_all"/>
</comando>

<subsecao>Inicialização</subsecao>

	Deve-se criar o seguinte <i>invoke script</i> para realizar a inicialização e
parada do servidor de aplicação de forma apropriada, salve o conteúdo abaixo
em <i>/etc/init.d/solr4</i>.

<comandoNumerado>
#!/bin/bash
# Solr 4.x invoke script
# Copyright (c) 2018 - Reinaldo Gil Lima de Carvalho <reinaldoc@gmail.com>

### BEGIN INIT INFO
# Provides:          solr4
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Solr4 invoke script
### END INIT INFO

### CONFIG
MESSAGE='Search Server: solr4'
GETPID='java -jar start.jar'
SERVICEUSER='solr'
SERVICECMD='cd {ARG1}; java -jar start.jar \
                       -Djetty.host=127.0.0.1 \
                       -Djetty.port={ARG2} \
                       -Dinit.instance={ARG1} >/dev/null 2>&1 &'

### END CONFIG

#
# Return execution status
#
# @param $1 string to be checked
# @return int
function isEmpty {
	[[ $1 =~ ^[[:space:]]*$ ]]
	return $?
}

#
# Set $PROCPID with service pid
#
# @param $1 service work directory
# @return void
#
function setPid() {
	if ! isEmpty "$1" ; then
		GETPID="$1"
	fi
PROCPID=$(ps -ef | grep "${GETPID}" | grep -v ' grep ' | tr -s ' ' | cut -f2 -d ' ')
}

#
# Kill managed PID
#
# @param $1 optional kill signal
# @return void
function killPid() {
	if ! isEmpty "$PROCPID" ; then
		kill "$1" "$PROCPID" > /dev/null 2>&1
	fi
}

#
# Start Service
#
# @param  $1   service work directory
# @return void
function startService() {
	if isEmpty "$1"; then
		echo "Err: service work directory is required as argument."
		return
	fi

	if isEmpty "$2"; then
		echo "Err: service port is required as argument."
		return
	fi

	echo -n "Starting $MESSAGE"
	setPid "$1"
	if isEmpty "$PROCPID"; then
		cmd=$(sed -re "s@\{ARG1\}@$1@g" <<< $SERVICECMD)
		cmd=$(sed -re "s@\{ARG2\}@$2@g" <<< $cmd)
		su -l $SERVICEUSER -s /bin/bash -c "$cmd"
		echo " ($1)."
	else
		echo " ($1 already started)."
	fi
}

#
# Stop Service
#
# @param  $1   service work directory
# @return void
function stopService() {
	if isEmpty "$1"; then
		echo "Err: service work directory is required as argument."
		return
	fi

	echo -n "Stopping $MESSAGE ($1)"
	setPid "$1"
	if isEmpty "$PROCPID"; then
		echo " (already stopped)."
		return
	fi

	killPid
	i=0
	while true; do
		setPid "$1"
		if ! isEmpty "$PROCPID" ; then
			if [ $i -gt 10 ] ; then
				killPid -9
			elif [ $i -gt 10 ] ; then
				killPid
			fi
			echo -n .
			sleep 2
		else
			break
		fi
		let i++
	done
	echo .
}

case "$1" in
	start)
		startService /srv/apache-solr-4.0.0/instance1 8983
	;;
	stop)
		stopService /srv/apache-solr-4.0.0/instance1
	;;
	restart)
		stopService /srv/apache-solr-4.0.0/instance1
		startService /srv/apache-solr-4.0.0/instance1 8983
	;;
	*)
		echo "Usage: $0 {start | stop | restart}"
		exit 1
	;;
esac

exit 0
</comandoNumerado>

    Deve-se cadastar o referido <i>invoke script</i> para ser executado
durante a inicialização e desligamento do sistema operacional, conforme
indicado abaixo:

<comando>
# chmod 755 /etc/init.d/solr4

> Debian
# update-rc.d -f solr4 defaults

> RedHat
# systemctl enable solr.service
</comando>
